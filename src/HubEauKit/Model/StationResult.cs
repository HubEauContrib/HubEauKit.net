/*
 * API Hub'Eau - Ecoulement des cours d'eau
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: vbeta
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HubEauKit.Client.OpenAPIDateConverter;

namespace HubEauKit.Model
{
    /// <summary>
    /// Résultat d&#39;une rêquete sur les stations
    /// </summary>
    [DataContract(Name = "StationResult")]
    public partial class StationResult : IEquatable<StationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StationResult" /> class.
        /// </summary>
        /// <param name="count">count (required).</param>
        /// <param name="first">first (required).</param>
        /// <param name="last">last (required).</param>
        /// <param name="prev">prev (required).</param>
        /// <param name="next">next (required).</param>
        /// <param name="apiVersion">apiVersion (required).</param>
        /// <param name="data">data (required).</param>
        public StationResult(int count = default(int), string first = default(string), string last = default(string), string prev = default(string), string next = default(string), string apiVersion = default(string), List<Station> data = default(List<Station>))
        {
            this.Count = count;
            // to ensure "first" is required (not null)
            if (first == null)
            {
                throw new ArgumentNullException("first is a required property for StationResult and cannot be null");
            }
            this.First = first;
            // to ensure "last" is required (not null)
            if (last == null)
            {
                throw new ArgumentNullException("last is a required property for StationResult and cannot be null");
            }
            this.Last = last;
            // to ensure "prev" is required (not null)
            if (prev == null)
            {
                throw new ArgumentNullException("prev is a required property for StationResult and cannot be null");
            }
            this.Prev = prev;
            // to ensure "next" is required (not null)
            if (next == null)
            {
                throw new ArgumentNullException("next is a required property for StationResult and cannot be null");
            }
            this.Next = next;
            // to ensure "apiVersion" is required (not null)
            if (apiVersion == null)
            {
                throw new ArgumentNullException("apiVersion is a required property for StationResult and cannot be null");
            }
            this.ApiVersion = apiVersion;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for StationResult and cannot be null");
            }
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name = "first", IsRequired = true, EmitDefaultValue = true)]
        public string First { get; set; }

        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name = "last", IsRequired = true, EmitDefaultValue = true)]
        public string Last { get; set; }

        /// <summary>
        /// Gets or Sets Prev
        /// </summary>
        [DataMember(Name = "prev", IsRequired = true, EmitDefaultValue = true)]
        public string Prev { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", IsRequired = true, EmitDefaultValue = true)]
        public string Next { get; set; }

        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        [DataMember(Name = "api_version", IsRequired = true, EmitDefaultValue = true)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<Station> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StationResult {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StationResult);
        }

        /// <summary>
        /// Returns true if StationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of StationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StationResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.First == input.First ||
                    (this.First != null &&
                    this.First.Equals(input.First))
                ) && 
                (
                    this.Last == input.Last ||
                    (this.Last != null &&
                    this.Last.Equals(input.Last))
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.ApiVersion == input.ApiVersion ||
                    (this.ApiVersion != null &&
                    this.ApiVersion.Equals(input.ApiVersion))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.First != null)
                {
                    hashCode = (hashCode * 59) + this.First.GetHashCode();
                }
                if (this.Last != null)
                {
                    hashCode = (hashCode * 59) + this.Last.GetHashCode();
                }
                if (this.Prev != null)
                {
                    hashCode = (hashCode * 59) + this.Prev.GetHashCode();
                }
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.ApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ApiVersion.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
