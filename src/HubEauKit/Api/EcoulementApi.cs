/*
 * API Hub'Eau - Ecoulement des cours d'eau
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: vbeta
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using HubEauKit.Client;
using HubEauKit.Model;

namespace HubEauKit.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEcoulementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lister les stations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les stations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Station</returns>
        Station GetChroniqueCsv(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les stations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les stations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Station</returns>
        ApiResponse<Station> GetChroniqueCsvWithHttpInfo(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);
        /// <summary>
        /// Lister les observations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les observations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Observation</returns>
        Observation GetChroniqueCsv1(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les observations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les observations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Observation</returns>
        ApiResponse<Observation> GetChroniqueCsv1WithHttpInfo(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);
        /// <summary>
        /// Lister les campagnes au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les campagnes au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Campagne</returns>
        Campagne GetChroniqueCsv2(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les campagnes au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les campagnes au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Campagne</returns>
        ApiResponse<Campagne> GetChroniqueCsv2WithHttpInfo(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0);
        /// <summary>
        /// Lister les campagnes
        /// </summary>
        /// <remarks>
        /// Lister les campagnes
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampagneResult</returns>
        CampagneResult GetCommunes(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les campagnes
        /// </summary>
        /// <remarks>
        /// Lister les campagnes
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampagneResult</returns>
        ApiResponse<CampagneResult> GetCommunesWithHttpInfo(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);
        /// <summary>
        /// Lister les stations
        /// </summary>
        /// <remarks>
        /// Lister les stations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StationResult</returns>
        StationResult GetResultats(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les stations
        /// </summary>
        /// <remarks>
        /// Lister les stations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StationResult</returns>
        ApiResponse<StationResult> GetResultatsWithHttpInfo(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);
        /// <summary>
        /// Lister les observations
        /// </summary>
        /// <remarks>
        /// Lister les observations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObservationResult</returns>
        ObservationResult GetResultats1(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// Lister les observations
        /// </summary>
        /// <remarks>
        /// Lister les observations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObservationResult</returns>
        ApiResponse<ObservationResult> GetResultats1WithHttpInfo(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEcoulementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Lister les stations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les stations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Station</returns>
        System.Threading.Tasks.Task<Station> GetChroniqueCsvAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les stations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les stations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Station)</returns>
        System.Threading.Tasks.Task<ApiResponse<Station>> GetChroniqueCsvWithHttpInfoAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lister les observations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les observations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Observation</returns>
        System.Threading.Tasks.Task<Observation> GetChroniqueCsv1Async(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les observations au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les observations au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Observation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Observation>> GetChroniqueCsv1WithHttpInfoAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lister les campagnes au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les campagnes au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campagne</returns>
        System.Threading.Tasks.Task<Campagne> GetChroniqueCsv2Async(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les campagnes au format CSV
        /// </summary>
        /// <remarks>
        /// Lister les campagnes au format CSV
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campagne)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campagne>> GetChroniqueCsv2WithHttpInfoAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lister les campagnes
        /// </summary>
        /// <remarks>
        /// Lister les campagnes
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampagneResult</returns>
        System.Threading.Tasks.Task<CampagneResult> GetCommunesAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les campagnes
        /// </summary>
        /// <remarks>
        /// Lister les campagnes
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampagneResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampagneResult>> GetCommunesWithHttpInfoAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lister les stations
        /// </summary>
        /// <remarks>
        /// Lister les stations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StationResult</returns>
        System.Threading.Tasks.Task<StationResult> GetResultatsAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les stations
        /// </summary>
        /// <remarks>
        /// Lister les stations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StationResult>> GetResultatsWithHttpInfoAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lister les observations
        /// </summary>
        /// <remarks>
        /// Lister les observations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObservationResult</returns>
        System.Threading.Tasks.Task<ObservationResult> GetResultats1Async(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lister les observations
        /// </summary>
        /// <remarks>
        /// Lister les observations
        /// </remarks>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObservationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObservationResult>> GetResultats1WithHttpInfoAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEcoulementApi : IEcoulementApiSync, IEcoulementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EcoulementApi : IEcoulementApi
    {
        private HubEauKit.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EcoulementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EcoulementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcoulementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EcoulementApi(string basePath)
        {
            this.Configuration = HubEauKit.Client.Configuration.MergeConfigurations(
                HubEauKit.Client.GlobalConfiguration.Instance,
                new HubEauKit.Client.Configuration { BasePath = basePath }
            );
            this.Client = new HubEauKit.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubEauKit.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = HubEauKit.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcoulementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EcoulementApi(HubEauKit.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = HubEauKit.Client.Configuration.MergeConfigurations(
                HubEauKit.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new HubEauKit.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new HubEauKit.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = HubEauKit.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcoulementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EcoulementApi(HubEauKit.Client.ISynchronousClient client, HubEauKit.Client.IAsynchronousClient asyncClient, HubEauKit.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = HubEauKit.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public HubEauKit.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public HubEauKit.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public HubEauKit.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public HubEauKit.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Lister les stations au format CSV Lister les stations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Station</returns>
        public Station GetChroniqueCsv(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<Station> localVarResponse = GetChroniqueCsvWithHttpInfo(codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, longitude, latitude, distance, bbox, sort, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les stations au format CSV Lister les stations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Station</returns>
        public HubEauKit.Client.ApiResponse<Station> GetChroniqueCsvWithHttpInfo(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Station>("/vbeta/ecoulement/stations.csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les stations au format CSV Lister les stations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Station</returns>
        public async System.Threading.Tasks.Task<Station> GetChroniqueCsvAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<Station> localVarResponse = await GetChroniqueCsvWithHttpInfoAsync(codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, longitude, latitude, distance, bbox, sort, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les stations au format CSV Lister les stations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Station)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<Station>> GetChroniqueCsvWithHttpInfoAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Station>("/vbeta/ecoulement/stations.csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les observations au format CSV Lister les observations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Observation</returns>
        public Observation GetChroniqueCsv1(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<Observation> localVarResponse = GetChroniqueCsv1WithHttpInfo(codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, codeCampagne, codeReseau, libelleReseau, dateObservationMin, dateObservationMax, codeEcoulement, libelleEcoulement, longitude, latitude, distance, bbox, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les observations au format CSV Lister les observations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Observation</returns>
        public HubEauKit.Client.ApiResponse<Observation> GetChroniqueCsv1WithHttpInfo(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (dateObservationMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_min", dateObservationMin));
            }
            if (dateObservationMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_max", dateObservationMax));
            }
            if (codeEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_ecoulement", codeEcoulement));
            }
            if (libelleEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_ecoulement", libelleEcoulement));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Observation>("/vbeta/ecoulement/observations.csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les observations au format CSV Lister les observations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Observation</returns>
        public async System.Threading.Tasks.Task<Observation> GetChroniqueCsv1Async(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<Observation> localVarResponse = await GetChroniqueCsv1WithHttpInfoAsync(codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, codeCampagne, codeReseau, libelleReseau, dateObservationMin, dateObservationMax, codeEcoulement, libelleEcoulement, longitude, latitude, distance, bbox, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les observations au format CSV Lister les observations au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Observation)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<Observation>> GetChroniqueCsv1WithHttpInfoAsync(List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (dateObservationMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_min", dateObservationMin));
            }
            if (dateObservationMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_max", dateObservationMax));
            }
            if (codeEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_ecoulement", codeEcoulement));
            }
            if (libelleEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_ecoulement", libelleEcoulement));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Observation>("/vbeta/ecoulement/observations.csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les campagnes au format CSV Lister les campagnes au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Campagne</returns>
        public Campagne GetChroniqueCsv2(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<Campagne> localVarResponse = GetChroniqueCsv2WithHttpInfo(codeCampagne, dateCampagneMin, dateCampagneMax, codeTypeCampagne, libelleTypeCampagne, codeReseau, libelleReseau, codeDepartement, libelleDepartement, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les campagnes au format CSV Lister les campagnes au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Campagne</returns>
        public HubEauKit.Client.ApiResponse<Campagne> GetChroniqueCsv2WithHttpInfo(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (dateCampagneMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_min", dateCampagneMin));
            }
            if (dateCampagneMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_max", dateCampagneMax));
            }
            if (codeTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_type_campagne", codeTypeCampagne));
            }
            if (libelleTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_type_campagne", libelleTypeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Campagne>("/vbeta/ecoulement/campagnes.csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les campagnes au format CSV Lister les campagnes au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campagne</returns>
        public async System.Threading.Tasks.Task<Campagne> GetChroniqueCsv2Async(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<Campagne> localVarResponse = await GetChroniqueCsv2WithHttpInfoAsync(codeCampagne, dateCampagneMin, dateCampagneMax, codeTypeCampagne, libelleTypeCampagne, codeReseau, libelleReseau, codeDepartement, libelleDepartement, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les campagnes au format CSV Lister les campagnes au format CSV
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campagne)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<Campagne>> GetChroniqueCsv2WithHttpInfoAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (dateCampagneMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_min", dateCampagneMin));
            }
            if (dateCampagneMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_max", dateCampagneMax));
            }
            if (codeTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_type_campagne", codeTypeCampagne));
            }
            if (libelleTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_type_campagne", libelleTypeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetChroniqueCsv2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Campagne>("/vbeta/ecoulement/campagnes.csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChroniqueCsv2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les campagnes Lister les campagnes
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampagneResult</returns>
        public CampagneResult GetCommunes(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<CampagneResult> localVarResponse = GetCommunesWithHttpInfo(codeCampagne, dateCampagneMin, dateCampagneMax, codeTypeCampagne, libelleTypeCampagne, codeReseau, libelleReseau, codeDepartement, libelleDepartement, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les campagnes Lister les campagnes
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampagneResult</returns>
        public HubEauKit.Client.ApiResponse<CampagneResult> GetCommunesWithHttpInfo(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (dateCampagneMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_min", dateCampagneMin));
            }
            if (dateCampagneMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_max", dateCampagneMax));
            }
            if (codeTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_type_campagne", codeTypeCampagne));
            }
            if (libelleTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_type_campagne", libelleTypeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetCommunes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CampagneResult>("/vbeta/ecoulement/campagnes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommunes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les campagnes Lister les campagnes
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampagneResult</returns>
        public async System.Threading.Tasks.Task<CampagneResult> GetCommunesAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<CampagneResult> localVarResponse = await GetCommunesWithHttpInfoAsync(codeCampagne, dateCampagneMin, dateCampagneMax, codeTypeCampagne, libelleTypeCampagne, codeReseau, libelleReseau, codeDepartement, libelleDepartement, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les campagnes Lister les campagnes
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeCampagne">Code(s) Onde de la campagne. Identfiant numérique auto incrémenté non signifiant, si plusieurs codes les séparer par une virgule, nombre maximum de codes &#x3D; 20 (optional)</param>
        /// <param name="dateCampagneMin">Date minimale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &gt;&#x3D; date_campagne_min (optional)</param>
        /// <param name="dateCampagneMax">Date maximale de la campagne (format YYYY-MM-DD) : renvoie les campagnes pour lesquelles date_campagne &lt;&#x3D; date_campagne_max (optional)</param>
        /// <param name="codeTypeCampagne">Code du type de campagne d&#39;observation. Valeurs possibles : 1 / 2 (optional)</param>
        /// <param name="libelleTypeCampagne">Type de campagne d&#39;observation. Valeurs possibles : Usuelle / Complémentaire (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampagneResult)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<CampagneResult>> GetCommunesWithHttpInfoAsync(List<int>? codeCampagne = default(List<int>?), DateTime? dateCampagneMin = default(DateTime?), DateTime? dateCampagneMax = default(DateTime?), List<int>? codeTypeCampagne = default(List<int>?), List<string>? libelleTypeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (dateCampagneMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_min", dateCampagneMin));
            }
            if (dateCampagneMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_campagne_max", dateCampagneMax));
            }
            if (codeTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_type_campagne", codeTypeCampagne));
            }
            if (libelleTypeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_type_campagne", libelleTypeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetCommunes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CampagneResult>("/vbeta/ecoulement/campagnes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommunes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les stations Lister les stations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StationResult</returns>
        public StationResult GetResultats(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<StationResult> localVarResponse = GetResultatsWithHttpInfo(format, codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, longitude, latitude, distance, bbox, sort, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les stations Lister les stations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StationResult</returns>
        public HubEauKit.Client.ApiResponse<StationResult> GetResultatsWithHttpInfo(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.geo+json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetResultats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StationResult>("/vbeta/ecoulement/stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les stations Lister les stations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StationResult</returns>
        public async System.Threading.Tasks.Task<StationResult> GetResultatsAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<StationResult> localVarResponse = await GetResultatsWithHttpInfoAsync(format, codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, longitude, latitude, distance, bbox, sort, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les stations Lister les stations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StationResult)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<StationResult>> GetResultatsWithHttpInfoAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), string? sort = default(string?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.geo+json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetResultats";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StationResult>("/vbeta/ecoulement/stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les observations Lister les observations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObservationResult</returns>
        public ObservationResult GetResultats1(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.ApiResponse<ObservationResult> localVarResponse = GetResultats1WithHttpInfo(format, codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, codeCampagne, codeReseau, libelleReseau, dateObservationMin, dateObservationMax, codeEcoulement, libelleEcoulement, longitude, latitude, distance, bbox, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les observations Lister les observations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObservationResult</returns>
        public HubEauKit.Client.ApiResponse<ObservationResult> GetResultats1WithHttpInfo(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.geo+json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (dateObservationMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_min", dateObservationMin));
            }
            if (dateObservationMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_max", dateObservationMax));
            }
            if (codeEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_ecoulement", codeEcoulement));
            }
            if (libelleEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_ecoulement", libelleEcoulement));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetResultats1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObservationResult>("/vbeta/ecoulement/observations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultats1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lister les observations Lister les observations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObservationResult</returns>
        public async System.Threading.Tasks.Task<ObservationResult> GetResultats1Async(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            HubEauKit.Client.ApiResponse<ObservationResult> localVarResponse = await GetResultats1WithHttpInfoAsync(format, codeStation, libelleStation, codeDepartement, libelleDepartement, codeCommune, libelleCommune, codeRegion, libelleRegion, codeBassin, libelleBassin, codeCoursEau, libelleCoursEau, codeCampagne, codeReseau, libelleReseau, dateObservationMin, dateObservationMax, codeEcoulement, libelleEcoulement, longitude, latitude, distance, bbox, numroDeLaPage, size, listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lister les observations Lister les observations
        /// </summary>
        /// <exception cref="HubEauKit.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional, default to json)</param>
        /// <param name="codeStation">Code(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleStation">Libellé(s) Sandre de la station hydrométrique. Valeurs possibles : http://services.sandre.eaufrance.fr/geo/hyd?SERVICE&#x3D;WFS&amp;VERSION&#x3D;1.1.0&amp;REQUEST&#x3D;GetFeature&amp;typename&#x3D;StationHydro_FXX&amp;SRSNAME&#x3D;EPSG:2154&amp;OUTPUTFORMAT&#x3D;GEOJSON. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeDepartement">Code(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleDepartement">Libellé(s) INSEE du département associé à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCommune">Code(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCommune">Libellé(s) INSEE de la commune associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeRegion">Code(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleRegion">Libellé(s) INSEE de la région associée à la station. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeBassin">Code(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="libelleBassin">Libellé(s) Sandre de la circonscription administrative de bassin. Valeurs possibles : http://id.eaufrance.fr/NSA/447. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 15 (optional)</param>
        /// <param name="codeCoursEau">Code(s) Sandre du cours d&#39;eau associé à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleCoursEau">Libellé(s) Sandre du cours d&#39;eau associée à la station hydrométrique. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/cea.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeCampagne">Code(s) Onde de la campagne d&#39;observation. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="codeReseau">Code(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="libelleReseau">Libellé(s) Sandre du réseau associé à la campagne d&#39;observation. Valeurs possibles : https://api.sandre.eaufrance.fr/referentiels/v1/dc.json. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 200 (optional)</param>
        /// <param name="dateObservationMin">Date minimale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &gt;&#x3D; date_observation_min (optional)</param>
        /// <param name="dateObservationMax">Date maximale de l&#39;observation (format YYYY-MM-DD) : renvoie les observations pour lesquelles date_observation &lt;&#x3D; date_observation_max (optional)</param>
        /// <param name="codeEcoulement">Code(s) de la modalité d&#39;écoulement. Valeurs possibles : 1 / 1a / 1f /  2 / 3 / 4. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="libelleEcoulement">Libellé de la modalité d&#39;écoulement. Valeurs possibles : Ecoulement visible / Ecoulement visible acceptable / Ecoulement visible faible / Ecoulement non visible / Assec / Observation impossible. Séparer les valeurs par des virgules. Nombre maximum de valeurs : 5 (optional)</param>
        /// <param name="longitude">Longitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 1.937 (optional)</param>
        /// <param name="latitude">Latitude du point en WGS84 pour la recherche par rayon, le point doit être utilisé comme séparateur décimal, exemple : 47.829 (optional)</param>
        /// <param name="distance">Rayon de recherche en kilomètre, le point doit être utilisé comme séparateur décimal, exemple : 30 (optional)</param>
        /// <param name="bbox">Rectangle d&#39;emprise de l&#39;objet demandé, emprise au format : min longitude, min latitude, max longitude, max latitude avec les coordonnées en WGS84 (EPSG:4326), le point doit être utilisé comme séparateur décimal, exemple : 1.6194,47.7965,2.1910,47.9988 (optional)</param>
        /// <param name="numroDeLaPage"> (optional)</param>
        /// <param name="size"> (optional, default to 20)</param>
        /// <param name="listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObservationResult)</returns>
        public async System.Threading.Tasks.Task<HubEauKit.Client.ApiResponse<ObservationResult>> GetResultats1WithHttpInfoAsync(string? format = default(string?), List<string>? codeStation = default(List<string>?), List<string>? libelleStation = default(List<string>?), List<string>? codeDepartement = default(List<string>?), List<string>? libelleDepartement = default(List<string>?), List<string>? codeCommune = default(List<string>?), List<string>? libelleCommune = default(List<string>?), List<string>? codeRegion = default(List<string>?), List<string>? libelleRegion = default(List<string>?), List<string>? codeBassin = default(List<string>?), List<string>? libelleBassin = default(List<string>?), List<string>? codeCoursEau = default(List<string>?), List<string>? libelleCoursEau = default(List<string>?), List<string>? codeCampagne = default(List<string>?), List<string>? codeReseau = default(List<string>?), List<string>? libelleReseau = default(List<string>?), DateTime? dateObservationMin = default(DateTime?), DateTime? dateObservationMax = default(DateTime?), List<string>? codeEcoulement = default(List<string>?), List<string>? libelleEcoulement = default(List<string>?), double? longitude = default(double?), double? latitude = default(double?), double? distance = default(double?), List<double>? bbox = default(List<double>?), int? numroDeLaPage = default(int?), int? size = default(int?), string? listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            HubEauKit.Client.RequestOptions localVarRequestOptions = new HubEauKit.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.geo+json",
                "application/javascript;charset=UTF-8"
            };

            var localVarContentType = HubEauKit.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = HubEauKit.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (codeStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_station", codeStation));
            }
            if (libelleStation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_station", libelleStation));
            }
            if (codeDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_departement", codeDepartement));
            }
            if (libelleDepartement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_departement", libelleDepartement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_commune", codeCommune));
            }
            if (libelleCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_commune", libelleCommune));
            }
            if (codeRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_region", codeRegion));
            }
            if (libelleRegion != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_region", libelleRegion));
            }
            if (codeBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_bassin", codeBassin));
            }
            if (libelleBassin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_bassin", libelleBassin));
            }
            if (codeCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_cours_eau", codeCoursEau));
            }
            if (libelleCoursEau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_cours_eau", libelleCoursEau));
            }
            if (codeCampagne != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_campagne", codeCampagne));
            }
            if (codeReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_reseau", codeReseau));
            }
            if (libelleReseau != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_reseau", libelleReseau));
            }
            if (dateObservationMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_min", dateObservationMin));
            }
            if (dateObservationMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "date_observation_max", dateObservationMax));
            }
            if (codeEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "code_ecoulement", codeEcoulement));
            }
            if (libelleEcoulement != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "libelle_ecoulement", libelleEcoulement));
            }
            if (longitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            }
            if (latitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            }
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("multi", "bbox", bbox));
            }
            if (numroDeLaPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Numéro de la page", numroDeLaPage));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation != null)
            {
                localVarRequestOptions.QueryParameters.Add(HubEauKit.Client.ClientUtils.ParameterToMultiMap("", "Liste des champs souhaités dans la réponse (fonctionnalité expérimentale), par exemple fields&#x3D;code_station,localisation", listeDesChampsSouhaitsDansLaRponseFonctionnalitExprimentaleParExempleFieldscodeStationlocalisation));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", HubEauKit.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "EcoulementApi.GetResultats1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObservationResult>("/vbeta/ecoulement/observations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResultats1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
